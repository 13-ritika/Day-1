// https://leetcode.com/problems/last-stone-weight/
// Approach 1

class Solution {
    public int lastStoneWeight(int[] stones) {
        if(stones.length==1)return stones[0];
        Arrays.sort(stones);
        int max1 = stones.length-1;
        int max2 = stones.length-2;
        while(max2>=0){
            if(stones[max2]==stones[max1]){
                stones[max2] = 0;
                stones[max1] = 0;
            }else{
                stones[max1] -= stones[max2];
                stones[max2] = 0;
            }
            Arrays.sort(stones);
            if(stones[max2]==0)break;
        }
        return stones[max1];
    }
}

// Approach 2

class Solution {
    public int lastStoneWeight(int[] stones) {
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());
        for(int i=0;i<stones.length;i++){
            pq.add(stones[i]);
        }
        while(pq.size()>1){
            int max = pq.poll();
            int max2 = pq.poll();
            if(max-max2>0) pq.add(max-max2);
        }
        
        return queue.isEmpty() ? 0 : pq.poll();
    }
}


